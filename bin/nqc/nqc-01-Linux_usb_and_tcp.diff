diff -d -U 3 -r -N -b nqc-3.1.r6/Makefile nqc-3.1.r6-1/Makefile
--- nqc-3.1.r6/Makefile	Wed Mar 16 13:49:40 2005
+++ nqc-3.1.r6-1/Makefile	Thu Aug  6 14:14:52 2009
@@ -70,6 +70,7 @@
 CFLAGS += -Iplatform -Ircxlib -Inqc -Icompiler -Wall
 
 USBOBJ = rcxlib/RCX_USBTowerPipe_none.o
+TCPOBJ = rcxlib/RCX_TcpPipe_none.o
 
 
 #
@@ -85,9 +86,11 @@
 else
 ifneq (,$(strip $(findstring $(OSTYPE), Linux)))
   # Linux
-# uncomment this next line if you have the USB tower library installed
-#  USBOBJ = rcxlib/RCX_USBTowerPipe_linux.o
-  CFLAGS += -I/usr/local/include/LegoUSB -Wno-deprecated
+  USBOBJ = rcxlib/RCX_USBTowerPipe_linux.o
+  TCPOBJ = rcxlib/RCX_TcpPipe_linux.o
+  # Timeout value is 200 in kernel driver module legousbtower.c
+  LEGO_TOWER_SET_READ_TIMEOUT?= 200
+  CFLAGS += -DLEGO_TOWER_SET_READ_TIMEOUT='$(LEGO_TOWER_SET_READ_TIMEOUT)' -Wno-deprecated
 else
 ifneq (,$(findstring $(OSTYPE), SunOS))
   # Solaris
@@ -96,7 +99,7 @@
 ifneq (,$(strip $(findstring $(OSTYPE), FreeBSD)))
   # FreeBSD
   USBOBJ = rcxlib/RCX_USBTowerPipe_fbsd.o
-  DEFAULT_SERIAL_NAME = "/dev/cuad0"
+  DEFAULT_SERIAL_NAME?= "/dev/cuad0"
   CFLAGS += -Wno-deprecated
 else
   # default Unix build without USB support
@@ -110,11 +113,13 @@
 # this must happen after the platform tweaks just in case the platform
 # wants to redefine the default serial name
 #
-ifndef DEFAULT_SERIAL_NAME
-  DEFAULT_SERIAL_NAME = "/dev/ttyS0"
-endif
+DEFAULT_SERIAL_NAME?= "/dev/ttyS0"
 CFLAGS += -DDEFAULT_SERIAL_NAME='$(DEFAULT_SERIAL_NAME)'
 
+DEFAULT_USB_NAME?= "/dev/legousbtower0"
+CFLAGS += -DDEFAULT_USB_NAME='$(DEFAULT_USB_NAME)'
+
+
 #
 # Object files
 #
@@ -124,7 +129,7 @@
 	rcxlib/RCX_Link.o rcxlib/RCX_Log.o rcxlib/RCX_Target.o \
 	rcxlib/RCX_Pipe.o rcxlib/RCX_PipeTransport.o rcxlib/RCX_Transport.o \
 	rcxlib/RCX_SpyboticsLinker.o rcxlib/RCX_SerialPipe.o \
-	$(USBOBJ)
+	$(USBOBJ) $(TCPOBJ)
 
 POBJ= platform/PStream.o platform/PSerial_unix.o \
 	platform/PHashTable.o platform/PListS.o
diff -d -U 3 -r -N -b nqc-3.1.r6/nqc/nqc.cpp nqc-3.1.r6-1/nqc/nqc.cpp
--- nqc-3.1.r6/nqc/nqc.cpp	Wed Jun  6 13:41:10 2007
+++ nqc-3.1.r6-1/nqc/nqc.cpp	Thu Aug  6 14:14:25 2009
@@ -1077,10 +1077,28 @@
 		case kRCX_GhostNotFoundError:
 			fprintf(STDERR,"Ghost libraries are not installed properly\n");
 			break;
+
+		case kRCX_TcpUnsupportedError:
+			fprintf(STDERR, "TCP not supported\n");
+			break;
+		case kRCX_UnknownTcpHostError:
+			fprintf(STDERR, "Unknown TCP host\n");
+			break;
+		case kRCX_OpenSocketError:
+			fprintf(STDERR, "Could not open TCP socket\n");
+			break;
+		case kRCX_BindPortError:
+			fprintf(STDERR, "Failure binding TCP port\n");
+			break;
+		case kRCX_TcpConnectError:
+			fprintf(STDERR, "Could not create TCP connection\n");
+			break;
+
 		default:
 			fprintf(STDERR, "Error #%d\n", -error);
 			break;
 	}
+	fflush(STDERR);
 }
 
 void PrintVersion()
diff -d -U 3 -r -N -b nqc-3.1.r6/rcxlib/RCX_Link.cpp nqc-3.1.r6-1/rcxlib/RCX_Link.cpp
--- nqc-3.1.r6/rcxlib/RCX_Link.cpp	Wed Mar 16 13:42:20 2005
+++ nqc-3.1.r6-1/rcxlib/RCX_Link.cpp	Thu Aug  6 14:14:25 2009
@@ -97,6 +97,15 @@
 		fTransport = new RCX_PipeTransport(pipe);
 #endif
 	}
+	else if (portName && ((devName=CheckPrefix(portName, "tcp")) != 0))
+	{
+		// TCP
+		gUSB = false;
+
+		RCX_Pipe *pipe = RCX_NewTcpPipe();
+		if (!pipe) return kRCX_TcpUnsupportedError;
+		fTransport = new RCX_PipeTransport(pipe);
+	}
 	else
 	{
 		// Serial Tower
diff -d -U 3 -r -N -b nqc-3.1.r6/rcxlib/RCX_Pipe.h nqc-3.1.r6-1/rcxlib/RCX_Pipe.h
--- nqc-3.1.r6/rcxlib/RCX_Pipe.h	Wed Mar 16 13:41:12 2005
+++ nqc-3.1.r6-1/rcxlib/RCX_Pipe.h	Thu Aug  6 14:14:25 2009
@@ -68,4 +68,10 @@
  */
 RCX_Pipe* RCX_NewUSBTowerPipe();
 
+/*
+ * This is an operating system dependent factory method for creating
+ * a pipe for TCP.
+ */
+RCX_Pipe* RCX_NewTcpPipe();
+
 #endif
diff -d -U 3 -r -N -b nqc-3.1.r6/rcxlib/RCX_Result.h nqc-3.1.r6-1/rcxlib/RCX_Result.h
--- nqc-3.1.r6/rcxlib/RCX_Result.h	Wed Mar 16 13:40:56 2005
+++ nqc-3.1.r6-1/rcxlib/RCX_Result.h	Thu Aug  6 14:14:25 2009
@@ -39,7 +39,14 @@
 #define kRCX_USBUnsupportedError	-10	// USB is not yet supported (depends on the OS)
 #define kRCX_GhostNotFoundError		-11	// USB requires Ghost, which is not installed
 
-#define kRCX_LastError			-11	//	last error code
+// new error codes for TCP support
+#define kRCX_TcpUnsupportedError	-12	// TCP is not yet supported
+#define kRCX_UnknownTcpHostError	-13	// unknown TCP host
+#define kRCX_OpenSocketError		-14	// failure opening a TCP socket
+#define kRCX_BindPortError		-15	// unable to bind port
+#define kRCX_TcpConnectError		-16	// cannot connect
+
+#define kRCX_LastError			-16	//	last error code
 
 #define RCX_ERROR(result)	((result) < 0)
 
diff -d -U 3 -r -N -b nqc-3.1.r6/rcxlib/RCX_TcpPipe_linux.cpp nqc-3.1.r6-1/rcxlib/RCX_TcpPipe_linux.cpp
--- nqc-3.1.r6/rcxlib/RCX_TcpPipe_linux.cpp	Wed Dec 31 19:00:00 1969
+++ nqc-3.1.r6-1/rcxlib/RCX_TcpPipe_linux.cpp	Thu Aug  6 16:25:39 2009
@@ -0,0 +1,265 @@
+/*
+ * The contents of this file are subject to the Mozilla Public License
+ * Version 1.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS"
+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
+ * License for the specific language governing rights and limitations
+ * under the License.
+ *
+ * The Initial Developer of this code is David Baum.
+ * Portions created by David Baum are Copyright (C) 1998 David Baum.
+ * All Rights Reserved.
+ *
+ * Portions created by John Hansen are Copyright (C) 2005 John Hansen.
+ * All Rights Reserved.
+ *
+ * Portions adapted from BrickEmu TCP patches by Matthew Sheets
+ * 	BrickEmu TCP Portions Copyright (C) 2003-2005 Jochen Hoenicke
+ * 	<http://hoenicke.ath.cx/rcx/brickemu.html>.
+ *
+ */
+
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+#include "RCX_Pipe.h"
+
+#include <stdlib.h>
+#include <string.h>
+
+#include <sys/socket.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <netdb.h>
+
+#include <limits.h>
+
+#include <cstdio>
+
+class RCX_TcpPipe_linux : public RCX_Pipe
+{
+public:
+	        RCX_TcpPipe_linux() : fd(-1) {}
+        virtual	~RCX_TcpPipe_linux() { Close(); }
+
+	virtual RCX_Result	Open(const char *name, int mode);
+	virtual void		Close();
+
+	virtual int		GetCapabilities() const;
+	virtual RCX_Result	SetMode(int mode);
+
+	virtual long		Read(void *ptr, long count, long timeout_ms);
+	virtual long		Write(const void *ptr, long count);
+        virtual bool            IsUSB() const { return true; };
+
+private:
+	void		SetTimeout(long timeout_ms);
+	int		fd;
+	fd_set		fds;
+	struct timeval	tv;
+};
+
+
+RCX_Pipe* RCX_NewTcpPipe()
+{
+	return new RCX_TcpPipe_linux();
+}
+
+#ifndef DEFAULT_HOST
+#define DEFAULT_HOST "localhost"
+#endif
+
+#ifndef DEFAULT_PORT
+#define DEFAULT_PORT 50637
+#endif
+
+RCX_Result RCX_TcpPipe_linux::Open(const char *name, int mode)
+{
+	char name_buf[PATH_MAX];
+	int port = 0;
+	struct hostent *h;
+	struct sockaddr_in localAddr, ttyAddr;
+
+	if (0 == name || 0 == *name)
+	{
+		h = gethostbyname(DEFAULT_HOST);
+		port = DEFAULT_PORT;
+	}
+	else
+	{
+		strcpy(name_buf, name);
+		char *portStr = strchr(name_buf, ':');
+		if (portStr)
+		{
+			port = atoi(portStr + 1);
+
+			// Since we have the port, we can remove that from the name string
+			// Change the ':' in name to the null (end-of-string) character
+			*portStr = 0;
+		}
+		else
+		{
+			port = DEFAULT_PORT;
+		}
+
+		h = gethostbyname(name_buf);
+	}
+
+	// Verify the host
+	if (!h)
+	{
+		return kRCX_UnknownTcpHostError;
+	}
+
+	// Create the socket
+	fd = socket(AF_INET, SOCK_STREAM, 0);
+	if (fd < 0)
+	{
+		return kRCX_OpenSocketError;
+	}
+
+	// Bind any port number
+	localAddr.sin_family = AF_INET;
+	localAddr.sin_addr.s_addr = htonl(INADDR_ANY);
+	localAddr.sin_port = htons(0);
+
+	if (bind(fd, (struct sockaddr *) &localAddr, sizeof(localAddr)) < 0)
+	{
+		return kRCX_BindPortError;
+	}
+
+	ttyAddr.sin_family = h->h_addrtype;
+	memcpy((char *) &ttyAddr.sin_addr.s_addr, h->h_addr_list[0], h->h_length);
+	ttyAddr.sin_port = htons(port);
+
+	if (connect(fd, (struct sockaddr *) &ttyAddr, sizeof(ttyAddr)) < 0)
+	{
+		return kRCX_TcpConnectError;
+	}
+
+
+        RCX_Result err = SetMode(mode);
+        if (err != kRCX_OK)
+        {
+          Close();
+          return err;
+        }
+        return kRCX_OK;
+}
+
+
+void RCX_TcpPipe_linux::Close()
+{
+	if (fd < 0) return;
+
+	close(fd);
+	fd = -1;
+}
+
+
+long RCX_TcpPipe_linux::Write(const void *ptr, long count)
+{
+	ssize_t actual;
+	ssize_t i;
+
+	actual = 0;
+	while(count > 0) {
+		if ((i = write(fd, (void *) &((char *)ptr)[actual], (size_t)count)) < 0)
+		{
+			return -1;
+		}
+		count -= i;
+		actual += i;
+	}
+
+	return actual;
+}
+
+
+long RCX_TcpPipe_linux::Read(void *ptr, long count, long timeout_ms)
+{
+	int selectResult;
+	ssize_t actual = 0;
+
+	FD_ZERO(&fds);
+	FD_SET(fd, &fds);
+
+	tv.tv_sec = (timeout_ms / 1000);
+	tv.tv_usec = (timeout_ms % 1000) * 1000;
+
+	selectResult = select(fd+1, &fds, NULL, NULL, &tv);
+
+	if (!FD_ISSET(fd, &fds))
+	{
+		// fprintf(stderr, "NOT SET ERROR\n");
+	}
+
+
+	// selectResult  < 0 is a SELECT ERROR
+	// selectResult == 0 is a TIMEOUT
+	// selectResult >  0 is BYTES DETECTED
+	if (selectResult > 0)
+	{
+		// Bytes detected
+		if ((actual = read(fd, ptr, count)) < 0)
+		{
+			return 0;
+		}
+	}
+
+	return actual;
+}
+
+
+int RCX_TcpPipe_linux::GetCapabilities() const
+{
+	// TODO: Is kTxEchoFlag needed here??
+	// only normal IR mode is supported, and
+	// the ABSORB_0x55_FLAG is needed to tell the
+	// transport that initial 0x55 bytes don't make
+	// it through the USB/driver shim
+	// return kNormalIrMode + kAbsorb55Flag;
+	return kNormalIrMode + kFastIrMode + kCyberMasterMode + kSpyboticsMode;
+}
+
+
+RCX_Result RCX_TcpPipe_linux::SetMode(int mode)
+{
+	switch(mode)
+	{
+		case kNormalIrMode:
+                case kFastIrMode:
+		case kCyberMasterMode:
+                case kSpyboticsMode:
+			return kRCX_OK;
+		default:
+			return kRCX_PipeModeError;
+	}
+}
+
+/*
+void RCX_TcpPipe_linux::SetTimeout(long timeout_ms)
+{
+fprintf(stderr, "TCP Set Timeout\n");
+	FD_ZERO(&fds);
+	FD_SET(fd, &fds);
+
+	tv.tv_sec = (timeout_ms / 1000) + 2;
+	tv.tv_usec = (timeout_ms % 1000) * 1000;
+
+	if (select(fd+1, &fds, NULL, NULL, &tv) < 0)
+	{
+fprintf(stderr, "SELECT ERROR\n");
+	}
+
+	if (!FD_ISSET(fd, &fds))
+	{
+fprintf(stderr, "NOT SET ERROR\n");
+	}
+}
+*/
diff -d -U 3 -r -N -b nqc-3.1.r6/rcxlib/RCX_TcpPipe_none.cpp nqc-3.1.r6-1/rcxlib/RCX_TcpPipe_none.cpp
--- nqc-3.1.r6/rcxlib/RCX_TcpPipe_none.cpp	Wed Dec 31 19:00:00 1969
+++ nqc-3.1.r6-1/rcxlib/RCX_TcpPipe_none.cpp	Thu Aug  6 14:14:25 2009
@@ -0,0 +1,30 @@
+/*
+ * The contents of this file are subject to the Mozilla Public License
+ * Version 1.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ * http://www.mozilla.org/MPL/
+ *
+ * Software distributed under the License is distributed on an "AS IS"
+ * basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See the
+ * License for the specific language governing rights and limitations
+ * under the License.
+ *
+ * The Initial Developer of this code is David Baum.
+ * Portions created by David Baum are Copyright (C) 1998 David Baum.
+ * All Rights Reserved.
+ *
+ * Portions created by John Hansen are Copyright (C) 2005 John Hansen.
+ * All Rights Reserved.
+ *
+ */
+
+#include "RCX_Pipe.h"
+
+/*
+ * This file should be added if TCP is not supported on the platform
+ */
+
+RCX_Pipe* RCX_NewTcpPipe()
+{
+	return 0;
+}
diff -d -U 3 -r -N -b nqc-3.1.r6/rcxlib/RCX_USBTowerPipe_linux.cpp nqc-3.1.r6-1/rcxlib/RCX_USBTowerPipe_linux.cpp
--- nqc-3.1.r6/rcxlib/RCX_USBTowerPipe_linux.cpp	Fri Oct 14 15:51:10 2005
+++ nqc-3.1.r6-1/rcxlib/RCX_USBTowerPipe_linux.cpp	Thu Aug  6 14:14:25 2009
@@ -29,8 +29,6 @@
 #include <sys/ioctl.h>
 #include "RCX_Pipe.h"
 
-#include <LegoUSB/legousbtower.h>
-
 
 class RCX_USBTowerPipe_linux : public RCX_Pipe
 {
@@ -59,14 +57,38 @@
 	return new RCX_USBTowerPipe_linux();
 }
 
-#define DEFAULT_TOWER_NAME "/dev/usb/lego0"
+#define USB_NAME_1 "/dev/legousbtower0"
+#define USB_NAME_2 "/dev/usb/legousbtower0"
+#ifndef DEFAULT_USB_NAME
+#define DEFAULT_USB_NAME USB_NAME_1
+#endif
 
 RCX_Result RCX_USBTowerPipe_linux::Open(const char *name, int mode)
 {
+	struct stat stFileInfo;
+
 	// if (name == 0 || *name==0)
+	//{
+	//	name = DEFAULT_USB_NAME;
+	//}
+
+	if ((0 != name) && (0 != *name))
 	{
-		name = DEFAULT_TOWER_NAME;
+		// a specific name was passed; attempt to use it
+	}
+	else if (0 == stat(DEFAULT_USB_NAME, &stFileInfo))
+	{
+		name = DEFAULT_USB_NAME;
 	}
+	else if (0 == stat(USB_NAME_1, &stFileInfo))
+	{
+		name = USB_NAME_1;
+	}
+	else if (0 == stat(USB_NAME_2, &stFileInfo))
+	{
+		name = USB_NAME_2;
+	}
+
 
 	fd = open(name, O_RDWR);
 
diff -d -U 3 -r -N -b nqc-3.1.r6/rcxlib/RCX_USBTowerPipe_win.cpp nqc-3.1.r6-1/rcxlib/RCX_USBTowerPipe_win.cpp
--- nqc-3.1.r6/rcxlib/RCX_USBTowerPipe_win.cpp	Fri Oct 14 14:40:34 2005
+++ nqc-3.1.r6-1/rcxlib/RCX_USBTowerPipe_win.cpp	Thu Aug  6 14:14:25 2009
@@ -66,7 +66,9 @@
 	return new RCX_USBTowerPipe_win();
 }
 
-#define DEFAULT_TOWER_NAME "\\\\.\\LEGOTOWER1"
+#ifndef DEFAULT_USB_NAME
+#define DEFAULT_USB_NAME "\\\\.\\LEGOTOWER1"
+#endif
 
 RCX_USBTowerPipe_win::RCX_USBTowerPipe_win() : fFile(INVALID_HANDLE_VALUE)
 {
@@ -77,7 +79,7 @@
         TowerAPILoaded = LoadLEGOTowerFunctions(&TOWER);
 	if (name == 0 || *name==0)
 	{
-		name = DEFAULT_TOWER_NAME;
+		name = DEFAULT_USB_NAME;
 	}
 
 	fFile = CreateFile(name, GENERIC_READ | GENERIC_WRITE,
